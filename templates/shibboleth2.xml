<SPConfig xmlns="urn:mace:shibboleth:2.0:native:sp:config"
    xmlns:conf="urn:mace:shibboleth:2.0:native:sp:config"
    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
    xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"    
    xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata"
    clockSkew="180">

	<!-- 
	Fill in the ´entityID´ you used in when generating the keys, most likely your SERVICE_URL. Set 
	´signing="front"´, because authentication requests must be signed with your private key in Haka. 
	Set ´attributePrefix="AJP_"´, because the Apache mod_ajp_proxy will pass through only variables 
	starting with prefix ´AJP_´.
	 -->
	<ApplicationDefaults entityID="{{ENTITY_ID}}" REMOTE_USER="eppn persistent-id targeted-id" signing="front" encryption="false" attributePrefix="AJP_">

        <Sessions lifetime="28800" timeout="3600" relayState="ss:mem"
                  checkAddress="false" handlerSSL="false" cookieProps="http" handlerURL="{{PATH}}/Shibboleth.sso">

			<!--  Configure the Discovery Service (former WAYF), where a user can select her own organization. -->
			
			<SSO discoveryProtocol="SAMLDS" discoveryURL="{{DISCOVERY_SERVICE}}" target="{{PATH}}/secure"> SAML2 </SSO>

            <!-- SAML and local-only logout. -->
            <Logout>SAML2 Local</Logout>
            
            <!-- Extension service that generates "approximate" metadata based on SP configuration. -->
            <Handler type="MetadataGenerator" Location="/Metadata" signing="false"/>

            <!-- Status reporting service. -->
            <Handler type="Status" Location="/Status" acl="127.0.0.1 ::1"/>

            <!-- Session diagnostic service. -->
            <Handler type="Session" Location="/Session" showAttributeValues="false"/>

            <!-- JSON feed of discovery information. -->
            <Handler type="DiscoveryFeed" Location="/DiscoFeed"/>
            
        </Sessions>

		<!--  Set the support email address, which is shown in error messages. -->

		<Errors supportContact="{{SUPPORT}}" logoLocation="{{LOGO}}" styleSheet="/shibboleth-sp/main.css"/>
        
        <!--  
        The address of the federation's SAML2 metadata. Configure it's address and the necessary filter according 
        to the federation's requirements.
         -->

		<MetadataProvider type="XML" uri="{{METADATA}}" backingFilePath="secret/backing_metadata.xml" reloadInterval="3600">
		 <SignatureMetadataFilter certificate="/etc/shibboleth/secret/metadata.crt"/>
		 <MetadataFilter type="RequireValidUntil" maxValidityInterval="2592000"/>
		</MetadataProvider>

        <!-- Map to extract attributes from SAML assertions. -->
        <AttributeExtractor type="XML" validate="true" reloadChanges="false" path="attribute-map.xml"/>
        
        <!-- Use a SAML query if no attributes are supplied during SSO. -->
        <AttributeResolver type="Query" subjectMatch="true"/>

        <!-- Default filtering policy for recognized attributes, lets other data pass. -->
        <AttributeFilter type="XML" validate="true" path="attribute-policy.xml"/>
        
        <!-- 
        Configure the file names of your private key and certificate, which we generated. We are going mount them 
        to /etc/shibboleth/secret.
         -->

		<CredentialResolver type="File" key="/etc/shibboleth/secret/sp-key.pem" certificate="/etc/shibboleth/secret/sp-cert.pem"/>

    </ApplicationDefaults>
    
    <!-- Policies that determine how to process and authenticate runtime messages. -->
    <SecurityPolicyProvider type="XML" validate="true" path="security-policy.xml"/>

    <!-- Low-level configuration about protocols and bindings available for use. -->
    <ProtocolProvider type="XML" validate="true" reloadChanges="false" path="protocols.xml"/>

</SPConfig>